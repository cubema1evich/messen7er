document.addEventListener("DOMContentLoaded", function () {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const username = sessionStorage.getItem('username');
    if (username) {
        document.getElementById('auth-buttons').style.display = 'none';
        document.getElementById('user-info').classList.add('active');
        document.getElementById('current-user').textContent = username;
        setTimeout(() => selectGroup(null, '–û–±—â–∏–π —á–∞—Ç'), 100);
    } else {
        document.getElementById('auth-buttons').style.display = 'flex';
        document.getElementById('user-info').classList.remove('active');
    }

    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const UI = {
        chatBox: document.getElementById("chat-box"),
        messageForm: document.getElementById("message-form"),
        messageInput: document.getElementById("message-input"),
        createGroupBtn: document.getElementById("create-group-btn"),
        groupsList: document.getElementById("groups-list"),
        currentGroupName: document.getElementById("current-group-name"),
        sidebar: document.querySelector(".sidebar"),
        sidebarToggle: document.getElementById("sidebar-toggle"), 
        sidebarClose: document.getElementById('sidebar-close'),
        searchUserInput: document.getElementById('search-user-input'),
        startChatBtn: document.getElementById('start-chat-btn'),
        currentChatInfo: document.getElementById('current-chat-info'),
        privateChatsList: document.getElementById('private-chats-list')
        //newMemberInput: document.getElementById("new-member-input"),
        //addMemberBtn: document.getElementById("add-member-btn"),
        //leaveGroupBtn: document.getElementById("leave-group-btn"),
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è

    UI.sidebarToggle.addEventListener('click', function(e) {
        e.stopPropagation();
        UI.sidebar.classList.toggle('active');
        this.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ —Å–∞–π–¥–±–∞—Ä–∞
    document.addEventListener('click', function(e) {
    if (!UI.sidebar.contains(e.target) && 
        !UI.sidebarToggle.contains(e.target) &&
        UI.sidebar.classList.contains('active')) {
        UI.sidebar.classList.remove('active');
        UI.sidebarToggle.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    }
});

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–∞–π–¥–±–∞—Ä–∞ —á–µ—Ä–µ–∑ –∫—Ä–µ—Å—Ç–∏–∫
    UI.sidebarClose.addEventListener('click', function(e) {
        e.stopPropagation();
        UI.sidebar.classList.remove('active');
        UI.sidebarToggle.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì—Ä—É–ø–ø—ã"
    });


    let currentGroup = null;
    let lastTimestamp = 0;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initEmojiPicker();
    loadGroups();
    loadPrivateChats();
    setInterval(() => {
        if (!currentGroup && !currentPrivateChat) { // –î–ª—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞
            loadMessages();
        }
        if (currentGroup) loadMessages();
        if (currentPrivateChat) loadPrivateMessages();
    }, 500);
    setupEventListeners();

    // –§—É–Ω–∫—Ü–∏–∏
    function initEmojiPicker() {

        const emojiPicker = document.getElementById("emoji-picker");
        const emojiButton = document.getElementById("emoji-btn");
        const messageInput = document.getElementById("message-input")
  
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
        document.addEventListener('click', (e) => {
            if(!emojiButton.contains(e.target) && !emojiPicker.contains(e.target)) {
                emojiPicker.classList.remove('show');
            }
        });

        // –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏
        const emojiList = [
            'üòÅ', 'üòÇ', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòá', 'üòà', 'üòâ', 'üòä',
            'üòã', 'üòå', 'üòç', 'üòé', 'üòè', 'üòê', 'üòí', 'üòì', 'üòî', 'üòñ',
            'üòò', 'üòö', 'üòú', 'üòù', 'üòû', 'üò†', 'üò°', 'üò¢', 'üò£', 'üò§',
            'üò•', 'üò®', 'üò©', 'üò™', 'üò´', 'üò≠', 'üò∞', 'üò±', 'üëç', 'üéâ',
            '‚ù§Ô∏è', 'üò∏', 'üòπ', 'üò∫', 'üòª', 'üòº', 'üòΩ', 'üòæ', 'üòø', 'üôÄ',
            'üí©', 'üë¥', 'üôÖ', 'üôÜ', 'üôá', 'üôà', 'üôâ', 'üôä', 'üôã', 'üôå',
            'üôç', 'üôé', 'üôè', 'üêå', 'üêç', 'üêé', 'üêë', 'üêí', 'üêî', 'üêó'
        ];

        const emojisPerRow = 6; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –≤ —Å—Ç—Ä–æ–∫–µ

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–∫–µ—Ä–∞ —ç–º–æ–¥–∑–∏
        emojiList.forEach((emoji, index) => {
            const emojiSpan = document.createElement('span');
            emojiSpan.innerText = emoji;
            emojiPicker.appendChild(emojiSpan);

            if ((index + 1) % emojisPerRow === 0) {
                const breakElement = document.createElement('br');
                emojiPicker.appendChild(breakElement);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —ç–º–æ–¥–∑–∏
        emojiButton.addEventListener("click", function(e) {
            e.stopPropagation();
            emojiPicker.classList.toggle("show");
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏
        emojiPicker.addEventListener("click", function(e) {
            if(e.target.tagName === "SPAN") {
                messageInput.value += e.target.innerText;
                emojiPicker.classList.remove("show");
            }
        });

    }
    
    async function loadMessages() {
        try {
            let url;
            let params = `timestamp=${lastTimestamp}`;
            
            if (currentGroup) {
                // –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
                url = `/get_group_messages?group_id=${currentGroup}&${params}`;
            } else if (currentPrivateChat) {
                // –õ–∏—á–Ω—ã–π —á–∞—Ç
                url = `/get_private_messages?user=${currentPrivateChat}&${params}`;
            } else {
                // –û–±—â–∏–π —á–∞—Ç
                url = `/get_messages?${params}`;
            }
    
            const res = await fetch(url);
            const data = await res.json();
            
            if(data.messages.length > 0) {
                displayMessages(data.messages);
                lastTimestamp = data.timestamp;
            }

        } catch (error) {
            console.error("Error loading messages:", error);
        }
    }
    function displayMessages(messages) {
        const chatBox = UI.chatBox;
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const tempMessages = Array.from(chatBox.children).filter(el => el.classList.contains('temp'));
        tempMessages.forEach(el => el.remove());
    
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
        const sortedMessages = [...messages].sort((a, b) => a.timestamp - b.timestamp);
    
        sortedMessages.forEach(msg => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            const messageId = msg.id || msg.timestamp; // –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑ –ë–î
            const existingMessage = chatBox.querySelector(`[data-id="${messageId}"]`);
    
            if (!existingMessage) {
                const messageElement = document.createElement("div");
                messageElement.className = "message" + (msg.temp ? " temp" : "");
                messageElement.dataset.id = messageId;
                messageElement.dataset.timestamp = msg.timestamp;
    
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
                const time = new Date(msg.timestamp * 1000).toLocaleTimeString([], { 
                    hour: '2-digit', 
                    minute: '2-digit'
                });
    
                messageElement.innerHTML = `
                    <div class="message-header">
                        <span class="sender">${msg.sender}</span>
                        <span class="time">${time}</span>
                    </div>
                    <p class="message-text">${msg.message_text}</p>
                `;
    
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —á–∞—Ç–∞
                chatBox.appendChild(messageElement);
            }
        });
    
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤–Ω–∏–∑—É –∏–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const isScrolledToBottom = chatBox.scrollHeight - chatBox.clientHeight <= chatBox.scrollTop + 100;
        
        if (isScrolledToBottom || messages.some(msg => msg.temp)) {
            chatBox.scrollTo({
                top: chatBox.scrollHeight,
                behavior: messages.some(msg => msg.temp) ? 'auto' : 'smooth'
            });
        }
    }

    async function createGroup() {
        const groupName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:");
        if (!groupName) return;
    
        try {
            const res = await fetch('/create_group', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ name: groupName })
            });
            
            if (res.ok) {
                loadGroups();
                alert("–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
            }
        } catch (error) {
            console.error("Error creating group:", error);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã");
        }
    }

    async function loadGroups() {
        try {
            const res = await fetch('/get_groups');
            const groups = await res.json();
            
            UI.groupsList.innerHTML = `
                <div class="group-item ${!currentGroup ? 'active' : ''}" 
                     onclick="selectGroup(null, '–û–±—â–∏–π —á–∞—Ç', this)">
                    –û–±—â–∏–π —á–∞—Ç
                </div>
                ${groups.map(group => `
                    <div class="group-item" 
                         data-group-id="${group.id}" 
                         onclick="selectGroup(${group.id}, '${group.name}', this)">
                        <span>${group.name}</span>
                        <div class="group-menu">
                            <button class="group-actions-btn" onclick="toggleGroupMenu(event, ${group.id})">‚ãÆ</button>
                            <div class="group-actions-menu" id="group-menu-${group.id}">
                                <button class="group-action" onclick="addMemberPrompt(${group.id})">–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞</button>
                                <button class="group-action" onclick="leaveGroupPrompt(${group.id})">–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É</button>
                            </div>
                        </div>
                    </div>
                `).join('')}
            `;
        } catch (error) {
            console.error("Error loading groups:", error);
        }
    }
    
    // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
    window.toggleGroupMenu = function(event, groupId) {
        event.stopPropagation();
        const menu = document.getElementById(`group-menu-${groupId}`);
        menu.classList.toggle('show');
    }
    
    window.addMemberPrompt = async function(groupId) {
        const username = prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:");
        if (username) {
            try {
                const res = await fetch('/add_to_group', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        group_id: groupId,
                        username: username,
                        role: 'member'
                    })
                });
                
                if (res.ok) {
                    alert("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
                }
            } catch (error) {
                console.error("Error adding member:", error);
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
        }
    }
    
    window.leaveGroupPrompt = async function(groupId) {
        if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É?")) {
            try {
                const res = await fetch('/leave_group', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({ group_id: groupId })
                });
        
                if (res.ok) {
                    currentGroup = null;
                    UI.currentGroupName.textContent = '';
                    loadGroups();
                    loadMessages();
                    alert("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É");
                }
            } catch (error) {
                console.error("Error leaving group:", error);
            }
        }
    }

        
    window.selectGroup = (groupId, groupName, element) => {
        currentGroup = groupId;
        currentPrivateChat = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π —á–∞—Ç
        UI.currentGroupName.textContent = groupName || '–û–±—â–∏–π —á–∞—Ç';
        UI.chatBox.innerHTML = ''; // –û—á–∏—â–∞–µ–º —á–∞—Ç
        lastTimestamp = 0;
        loadMessages();
    };



    function setupEventListeners() {
        UI.messageForm.addEventListener("submit", sendMessage);
        UI.createGroupBtn.addEventListener("click", createGroup);
        
        document.addEventListener('click', function(e) {
            document.querySelectorAll('.group-actions-menu').forEach(menu    => {
                if (!menu.contains(e.target)) {
                    menu.classList.remove('show');
                }
            });
        });

        UI.messageForm.addEventListener("submit", function(e) {
            e.preventDefault();
            sendMessage(e);
        });

        UI.messageInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage(e);
            }
        });
    }

    async function sendMessage(e) {
        e.preventDefault();
        const message = UI.messageInput.value.trim();
        if (!message) return;
    
        try {
            let url, body = {};
            
            if (currentGroup) {
                url = '/send_message';
                body = { message, group_id: currentGroup };
            } else if (currentPrivateChat) {
                url = '/send_private_message';
                body = { 
                    message: message,
                    receiver: currentPrivateChat 
                };
            } else {
                url = '/send_message';
                body = { message };
            }
    
            const res = await fetch(url, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(body)
            });
            
            if (!res.ok) {
                const error = await res.json();
                throw new Error(error.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }
            
            if (currentPrivateChat) {
                await loadPrivateChats();
                await loadPrivateMessages();
                selectPrivateChat(currentPrivateChat); // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            }
            UI.messageInput.value = '';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const username = sessionStorage.getItem('username');
            const tempMessage = {
                id: Date.now(), // –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                sender: username,
                message_text: message,
                timestamp: Math.floor(Date.now()/1000),
                temp: true
            };
            
            displayMessages([tempMessage]);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert(error.message);
        }
    }


    const messageInput = document.getElementById('message-input');

    messageInput.addEventListener('input', function () {
        this.style.height = 'auto'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
        this.style.height = (this.scrollHeight) + 'px'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤—ã—Å–æ—Ç—É
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—Å–æ—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('load', function () {
        messageInput.style.height = 'auto';
        messageInput.style.height = (messageInput.scrollHeight) + 'px';
    });


        let currentPrivateChat = null;

    // –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    UI.startChatBtn.addEventListener('click', startPrivateChat);
    UI.searchUserInput.addEventListener('input', searchUsers);

    // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    async function searchUsers() {
        const searchTerm = UI.searchUserInput.value;
        if (searchTerm.length < 2) return;
        
        try {
            const res = await fetch(`/search_users?q=${encodeURIComponent(searchTerm)}`);
            const data = await res.json();
            renderUserSearchResults(data.users);
        } catch (error) {
            console.error("Search error:", error);
        }
    }

    function renderUserSearchResults(users) {
        UI.privateChatList.innerHTML = users.map(user => `
            <div class="user-item" onclick="selectPrivateChat('${user}')">
                ${user}
            </div>
        `).join('');
    }

    async function selectPrivateChat(username) {
        currentPrivateChat = username;
        currentGroup = null;
        UI.currentGroupName.textContent = `–õ–∏—á–Ω—ã–π —á–∞—Ç —Å ${username}`;
        UI.chatBox.innerHTML = '';
        lastTimestamp = 0;
        await loadPrivateMessages();
        await loadPrivateChats(); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        
        // –î–æ–±–∞–≤—å—Ç–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        document.querySelectorAll('.chat-item').forEach(item => {
            item.classList.remove('active');
            if (item.querySelector('span').textContent === username) {
                item.classList.add('active');
            }
        });
    }

    async function loadPrivateMessages() {
        if (!currentPrivateChat) return;
        
        try {
            const res = await fetch(`/get_private_messages?user=${currentPrivateChat}&timestamp=${lastTimestamp}`);
            const data = await res.json();
            
            if(data.messages.length > 0) {
                displayMessages(data.messages);
                lastTimestamp = data.timestamp;
            }
        } catch (error) {
            console.error("Error loading private messages:", error);
        }
    }

    async function startPrivateChat() {
        const username = UI.searchUserInput.value.trim();
        if (!username) return;
        
        selectPrivateChat(username);
        UI.searchUserInput.value = '';
    }
    async function loadPrivateChats() {
        try {
            const res = await fetch('/get_private_chats');
            const data = await res.json();
            console.log('Private chats data:', data);
            renderPrivateChats(data.chats);
        } catch (error) {
            console.error("Error loading private chats:", error);
        }
    }

    function renderPrivateChats(chats) {
        if (!UI.privateChatsList) {
            console.error('Chat list container not found!');
            return;
        }
        
        UI.privateChatsList.innerHTML = chats.map(chat => `
            <div class="chat-item" onclick="selectPrivateChat('${chat.username}')">
                <span>${chat.username}</span>
                <small>${new Date(chat.last_activity * 1000).toLocaleString()}</small>
            </div>
        `).join('');
    }

    async function selectPrivateChat(username) {
        console.log('Selecting chat with:', username);
        try {
            currentPrivateChat = username;
            currentGroup = null;
            UI.currentGroupName.textContent = `–ß–∞—Ç —Å ${username}`;
            UI.chatBox.innerHTML = '';
            lastTimestamp = 0;
            
            await loadPrivateMessages();
            await loadPrivateChats();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            document.querySelectorAll('.chat-item').forEach(item => {
                item.classList.remove('active');
                if (item.querySelector('span').textContent === username) {
                    item.classList.add('active');
                }
            });
            
        } catch (error) {
            console.error('Error selecting chat:', error);
        }
    }

    window.selectPrivateChat = selectPrivateChat;

});
