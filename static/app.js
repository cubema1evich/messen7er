document.addEventListener("DOMContentLoaded", function () {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const username = sessionStorage.getItem('username');
    if (username) {
        document.getElementById('current-user').textContent = sessionStorage.getItem('username');
    }
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const UI = {
        chatBox: document.getElementById("chat-box"),
        messageForm: document.getElementById("message-form"),
        messageInput: document.getElementById("message-input"),
        createGroupBtn: document.getElementById("create-group-btn"),
        groupsList: document.getElementById("groups-list"),
        currentGroupName: document.getElementById("current-group-name"),
        newMemberInput: document.getElementById("new-member-input"),
        addMemberBtn: document.getElementById("add-member-btn")
    };

    let currentGroup = null;
    let lastTimestamp = 0;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initEmojiPicker();
    loadGroups();
    setInterval(loadMessages, 1000);
    setupEventListeners();

    // –§—É–Ω–∫—Ü–∏–∏
    function initEmojiPicker() {

        const emojiPicker = document.getElementById("emoji-picker");
        const emojiButton = document.getElementById("emoji-btn");
        // –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏
        const emojiList = [
            'üòÅ', 'üòÇ', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòá', 'üòà', 'üòâ', 'üòä',
            'üòã', 'üòå', 'üòç', 'üòé', 'üòè', 'üòê', 'üòí', 'üòì', 'üòî', 'üòñ',
            'üòò', 'üòö', 'üòú', 'üòù', 'üòû', 'üò†', 'üò°', 'üò¢', 'üò£', 'üò§',
            'üò•', 'üò®', 'üò©', 'üò™', 'üò´', 'üò≠', 'üò∞', 'üò±', 'üëç', 'üéâ',
            '‚ù§Ô∏è', 'üò∏', 'üòπ', 'üò∫', 'üòª', 'üòº', 'üòΩ', 'üòæ', 'üòø', 'üôÄ',
            'üí©', 'üë¥', 'üôÖ', 'üôÜ', 'üôá', 'üôà', 'üôâ', 'üôä', 'üôã', 'üôå',
            'üôç', 'üôé', 'üôè', 'üêå', 'üêç', 'üêé', 'üêë', 'üêí', 'üêî', 'üêó'
        ];

        const emojisPerRow = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –≤ —Å—Ç—Ä–æ–∫–µ

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–∫–µ—Ä–∞ —ç–º–æ–¥–∑–∏
        emojiList.forEach((emoji, index) => {
            const emojiSpan = document.createElement('span');
            emojiSpan.innerText = emoji;
            emojiPicker.appendChild(emojiSpan);

            if ((index + 1) % emojisPerRow === 0) {
                const breakElement = document.createElement('br');
                emojiPicker.appendChild(breakElement);
            }
        });

        // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–∏–∫–µ—Ä–∞ —ç–º–æ–¥–∑–∏
        emojiButton.addEventListener("click", function () {
            emojiPicker.classList.toggle("show");
        });

        // –í—Å—Ç–∞–≤–∫–∞ —ç–º–æ–¥–∑–∏ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        emojiPicker.addEventListener("click", function (event) {
            if (event.target.tagName === "SPAN") {
                const emoji = event.target.innerText;
                messageInput.value += emoji;
            }
            emojiPicker.classList.remove("show");
        });
    }
    
    async function loadMessages() {
        try {
            const url = currentGroup 
                ? `/get_group_messages?group_id=${currentGroup}&timestamp=${lastTimestamp}`
                : `/get_messages?timestamp=${lastTimestamp}`;
            
            const res = await fetch(url);
            const data = await res.json();
            
            if(data.messages.length > 0) {
                displayMessages(data.messages);
                lastTimestamp = data.timestamp;
            }
        } catch (error) {
            console.error("Error loading messages:", error);
        }
    }

    function displayMessages(messages) {
        UI.chatBox.innerHTML = messages.map(msg => `
            <div class="message">
                <div class="sender">${msg.sender}</div>
                <p>${msg.message_text}</p>
            </div>
        `).join('');
    }

    async function createGroup() {
        const groupName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:");
        if (!groupName) return;
    
        try {
            const res = await fetch('/create_group', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ name: groupName })
            });
            
            if (res.ok) {
                loadGroups();
                alert("–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
            }
        } catch (error) {
            console.error("Error creating group:", error);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã");
        }
    }

    async function loadGroups() {
        try {
            const res = await fetch('/get_groups');
            const groups = await res.json();
            
            UI.groupsList.innerHTML = groups.map(group => `
                <div class="group-item" data-group-id="${group.id}" 
                     onclick="selectGroup(${group.id}, '${group.name}')">
                    ${group.name}
                </div>
            `).join('');
        } catch (error) {
            console.error("Error loading groups:", error);
        }
    }

    window.selectGroup = (groupId, groupName) => {
    currentGroup = groupId;
    UI.currentGroupName.textContent = groupName;
    UI.chatBox.innerHTML = ''; // –û—á–∏—â–∞–µ–º —á–∞—Ç
    lastTimestamp = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º—Å—Ç–∞–º–ø
    loadMessages(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
    };

    async function addMember() {
        if (!currentGroup) {
            alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É!");
            return;
        }
        
        const username = UI.newMemberInput.value.trim();
        if (!username) {
            alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
            return;
        }
    
        try {
            const res = await fetch('/add_to_group', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    group_id: currentGroup,
                    username: username,
                    role: 'member'
                })
            });
            
            if (res.ok) {
                UI.newMemberInput.value = '';
                alert("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
            }
        } catch (error) {
            console.error("Error adding member:", error);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
    }

    function setupEventListeners() {
        UI.messageForm.addEventListener("submit", sendMessage);
        UI.addMemberBtn.addEventListener("click", addMember);
        UI.createGroupBtn.addEventListener("click", createGroup);
    }

    async function sendMessage(e) {
        e.preventDefault();
        const message = UI.messageInput.value.trim();
        if (!message) return;

        try {
            const res = await fetch('/send_message', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    message: message,
                    group_id: currentGroup
                })
            });
            
            if (res.ok) {
                UI.messageInput.value = '';
            }
        } catch (error) {
            console.error("Error sending message:", error);
        }
    }
});