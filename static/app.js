document.addEventListener("DOMContentLoaded", function () {

    const updateAuthButtons = () => {
        const authButtons = document.getElementById('auth-buttons');
        const username = sessionStorage.getItem('username');
        
        if (username) {
            authButtons.innerHTML = `
                <span class="username-display">–í—ã –≤–æ—à–ª–∏: ${username}</span>
                <button onclick="logout()" class="logout-btn">–í—ã—Ö–æ–¥</button>
            `;
        } else {
            authButtons.innerHTML = `
                <button onclick="window.location.href='/register'" class="auth-btn">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìù</button>
                <button onclick="window.location.href='/login'" class="auth-btn">–í—Ö–æ–¥ üîë</button>
            `;
        }
    };

    updateAuthButtons();
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤
    window.selectGroup = function(groupId, groupName, element) {
        currentGroup = groupId;
        currentPrivateChat = null;
        sessionStorage.setItem('currentChat', JSON.stringify({
            type: groupId ? 'group' : 'general',
            id: groupId,
            name: groupName
        }));
        UI.currentGroupName.textContent = groupName || '–û–±—â–∏–π —á–∞—Ç';
        UI.chatBox.innerHTML = '';
        lastTimestamp = 0;
        loadGroups();
        loadMessages();
    };

    window.selectPrivateChat = async function(username) {
        UI.membersSidebar.classList.remove('active');
        currentPrivateChat = username;
        currentGroup = null;
        sessionStorage.setItem('currentChat', JSON.stringify({
            type: 'private',
            name: username
        }));
        UI.currentGroupName.textContent = `–õ–∏—á–Ω—ã–π —á–∞—Ç —Å ${username}`;
        UI.chatBox.innerHTML = '';
        lastTimestamp = 0;
        await loadPrivateMessages();
        await loadPrivateChats();
        loadMessages();
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let currentGroup = null;
    let currentPrivateChat = null;
    let lastTimestamp = 0;
    const username = sessionStorage.getItem('username');
    let currentSearch = {
        type: '',
        chatId: null,
        query: '',
        page: 1,
        perPage: 20,
        sort: 'date'
    };

    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const UI = {
        chatBox: document.getElementById("chat-box"),
        messageForm: document.getElementById("message-form"),
        messageInput: document.getElementById("message-input"),
        createGroupBtn: document.getElementById("create-group-btn"),
        groupsList: document.getElementById("groups-list"),
        currentGroupName: document.getElementById("current-group-name"),
        sidebar: document.querySelector(".sidebar"),
        sidebarToggle: document.getElementById("sidebar-toggle"), 
        sidebarClose: document.getElementById('sidebar-close'),
        searchUserInput: document.getElementById('search-user-input'),
        startChatBtn: document.getElementById('start-chat-btn'),
        currentChatInfo: document.getElementById('current-chat-info'),
        sendBtn: document.getElementById('send-btn'),
        privateChatsList: document.getElementById('private-chats-list'),
        fileInput: document.getElementById('file-input'),
        fileBtn: document.getElementById('file-btn'),
        fileIndicator: document.getElementById('file-indicator'),
        fileCount: document.querySelector('.file-count'),
        clearFilesBtn: document.querySelector('.clear-files-btn'),
        membersToggle: document.getElementById("members-toggle"),
        membersSidebar: document.querySelector(".sidebar-right"),
        membersClose: document.getElementById('members-close'),
        membersList: document.getElementById('members-list')
    };
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞
    const savedChat = JSON.parse(sessionStorage.getItem('currentChat') || 'null');
    if (savedChat) {
        if (savedChat.type === 'group') {
            selectGroup(savedChat.id, savedChat.name);
        } else if (savedChat.type === 'private') {
            selectPrivateChat(savedChat.name);
        }
    } else {
        selectGroup(null, '–û–±—â–∏–π —á–∞—Ç');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ —Å–∞–π–¥–±–∞—Ä–∞
    UI.membersToggle.addEventListener('click', function(e) {
        e.stopPropagation();
        UI.membersSidebar.classList.toggle('active');
        loadParticipants();
    });

    //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ñ–∞–π–ª–∞
    UI.fileBtn.addEventListener('click', () => UI.fileInput.click());

    //–æ–±—Ä–∞—é–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    UI.fileInput.addEventListener('change', updateFileIndicator);
    UI.clearFilesBtn.addEventListener('click', clearFiles);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è
    UI.sidebarToggle.addEventListener('click', function(e) {
        e.stopPropagation();
        UI.sidebar.classList.toggle('active');
        this.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ —Å–∞–π–¥–±–∞—Ä–∞
    document.addEventListener('click', function(e) {
    if (!UI.sidebar.contains(e.target) && 
        !UI.sidebarToggle.contains(e.target) &&
        UI.sidebar.classList.contains('active')) {
        UI.sidebar.classList.remove('active');
        UI.sidebarToggle.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    }
    if (!UI.membersSidebar.contains(e.target) && 
        !UI.membersToggle.contains(e.target) &&
        UI.membersSidebar.classList.contains('active')) {
        UI.membersSidebar.classList.remove('active');
    }

    window.logout = function() {
        sessionStorage.clear();
        document.cookie = 'user_id=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        updateAuthButtons();
        window.location.href = '/login';
    };
});

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–∞–π–¥–±–∞—Ä–∞ —á–µ—Ä–µ–∑ –∫—Ä–µ—Å—Ç–∏–∫
    UI.sidebarClose.addEventListener('click', function(e) {
        e.stopPropagation();
        UI.sidebar.classList.remove('active');
        UI.sidebarToggle.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì—Ä—É–ø–ø—ã"
    });

    UI.membersClose.addEventListener('click', function(e) {
        e.stopPropagation();
        UI.membersSidebar.classList.remove('active');
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initEmojiPicker();
    loadGroups();
    loadPrivateChats();
    setupEventListeners();
    // –í app.js –∑–∞–º–µ–Ω–∏—Ç–µ setInterval –Ω–∞ —ç—Ç–æ:
    let isTabActive = true;

    window.addEventListener('focus', () => {
        isTabActive = true;
        checkForUpdates();
    });

    window.addEventListener('blur', () => {
        isTabActive = false;
    });

    function checkForUpdates() {
        if (!isTabActive) return;
        
        try {
            // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            checkInterfaceUpdates();
            
            // if (UI.membersSidebar.classList.contains('active')) {
            //     loadParticipants();
            // }
            
            // –î–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã
            loadPrivateChats();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (currentGroup) {
                loadMessages();
            } else if (currentPrivateChat) {
                loadPrivateMessages();
            } else {
                loadMessages();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ/—É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            checkDeletedMessages();
            checkEditedMessages();
            
        } catch (e) {
            console.error('Interval error:', e);
        }
        
        debouncedUpdate();;
    }
    
    let updateTimeout;
    
    function debouncedUpdate() {
        clearTimeout(updateTimeout);
        updateTimeout = setTimeout(() => {
            checkForUpdates();
        }, 1000);
    }

    checkForUpdates();

    // –§—É–Ω–∫—Ü–∏–∏
    function initEmojiPicker() {

        const emojiPicker = document.getElementById("emoji-picker");
        const emojiButton = document.getElementById("emoji-btn");
        const messageInput = document.getElementById("message-input")
  
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
        document.addEventListener('click', (e) => {
            if(!emojiButton.contains(e.target) && !emojiPicker.contains(e.target)) {
                emojiPicker.classList.remove('show');
            }
        });

        // –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏
        const emojiList = [
            'üòÅ', 'üòÇ', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòá', 'üòà', 'üòâ', 'üòä',
            'üòã', 'üòå', 'üòç', 'üòé', 'üòè', 'üòê', 'üòí', 'üòì', 'üòî', 'üòñ',
            'üòò', 'üòö', 'üòú', 'üòù', 'üòû', 'üò†', 'üò°', 'üò¢', 'üò£', 'üò§',
            'üò•', 'üò®', 'üò©', 'üò™', 'üò´', 'üò≠', 'üò∞', 'üò±', 'üëç', 'üéâ',
            '‚ù§Ô∏è', 'üò∏', 'üòπ', 'üò∫', 'üòª', 'üòº', 'üòΩ', 'üòæ', 'üòø', 'üôÄ',
            'üí©', 'üë¥', 'üôÖ', 'üôÜ', 'üôá', 'üôà', 'üôâ', 'üôä', 'üôã', 'üôå',
            'üôç', 'üôé', 'üôè', 'üêå', 'üêç', 'üêé', 'üêë', 'üêí', 'üêî', 'üêó'
        ];

        const emojisPerRow = 6; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –≤ —Å—Ç—Ä–æ–∫–µ

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–∫–µ—Ä–∞ —ç–º–æ–¥–∑–∏
        emojiList.forEach((emoji, index) => {
            const emojiSpan = document.createElement('span');
            emojiSpan.innerText = emoji;
            emojiPicker.appendChild(emojiSpan);

            if ((index + 1) % emojisPerRow === 0) {
                const breakElement = document.createElement('br');
                emojiPicker.appendChild(breakElement);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —ç–º–æ–¥–∑–∏
        emojiButton.addEventListener("click", function(e) {
            e.stopPropagation();
            emojiPicker.classList.toggle("show");
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏
        emojiPicker.addEventListener("click", function(e) {
            if(e.target.tagName === "SPAN") {
                // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UI
                UI.messageInput.value += e.target.innerText;
                emojiPicker.classList.remove("show");
                
                // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ input –¥–ª—è –∞–≤—Ç–æ-–≤—ã—Å–æ—Ç—ã
                const event = new Event('input');
                UI.messageInput.dispatchEvent(event);
            }
        
        });

    }
    
    async function loadMessages() {
        try {
            let url;
            let params = `timestamp=${lastTimestamp}`;
            
            if (currentGroup) {
                const accessRes = await fetch(`/check_group_access?group_id=${currentGroup}`);
                const accessData = await accessRes.json();
                
                if (!accessData.has_access) {
                    currentGroup = null;
                    sessionStorage.removeItem('currentChat');
                    UI.currentGroupName.textContent = '–û–±—â–∏–π —á–∞—Ç';
                    UI.chatBox.innerHTML = '';
                    lastTimestamp = 0;
                    return loadMessages();
                }
                
                url = `/get_group_messages?group_id=${currentGroup}&${params}`;
            } else if (currentPrivateChat) {
                url = `/get_private_messages?user=${encodeURIComponent(currentPrivateChat)}&${params}`;
            } else {
                url = `/get_messages?${params}`;
            }
    
            const res = await fetch(url, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            
            if (res.status === 401) {
                window.location.href = '/login';
                return;
            }
            
            if (res.status === 403) {
                currentGroup = null;
                sessionStorage.removeItem('currentChat');
                UI.currentGroupName.textContent = '–û–±—â–∏–π —á–∞—Ç';
                return loadMessages();
            }
    
            if (res.status === 500) {
                window.location.href = '/500';
                return;
            }
    
            if (!res.ok) {
                const error = await res.json();
                throw new Error(error.message || `HTTP error! status: ${res.status}`);
            }
            
            const data = await res.json();
            
            if (lastTimestamp === 0) {
                UI.chatBox.innerHTML = '';
            }
            
            if(data.messages.length > 0) {
                displayMessages(data.messages);
                lastTimestamp = data.timestamp;
            }
        } catch (error) {
            console.error("Error loading messages:", error);
            
            if (error.message.includes('403') && currentGroup) {
                currentGroup = null;
                sessionStorage.removeItem('currentChat');
                UI.currentGroupName.textContent = '–û–±—â–∏–π —á–∞—Ç';
                loadMessages();
            } else if (error.message.includes('401')) {
                window.location.href = '/login';
            } else {
                UI.chatBox.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</div>';
            }
        }
    }

    function displayMessages(messages) {
        const chatBox = UI.chatBox;
        const wasScrolledToBottom = chatBox.scrollHeight - chatBox.clientHeight <= chatBox.scrollTop + 50;
    
        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const tempMessages = Array.from(chatBox.children).filter(el => el.classList.contains('temp'));
        tempMessages.forEach(el => el.remove());
    
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        const sortedMessages = [...messages].sort((a, b) => a.timestamp - b.timestamp);
    
        // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const displayedIds = new Set();
        Array.from(chatBox.children).forEach(el => displayedIds.add(el.dataset.id));
    
        sortedMessages.forEach(msg => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (displayedIds.has(msg.id.toString())) return;
    
            const messageElement = document.createElement("div");
            messageElement.className = "message" + (msg.temp ? " temp" : "");
            
            if (msg.user_id === 0 || msg.sender === 'System') {
                messageElement.classList.add('system-message');
            }
            
            messageElement.dataset.id = msg.id;
            messageElement.dataset.timestamp = msg.timestamp;
    
            const timeOptions = { hour: '2-digit', minute: '2-digit', hour12: false };
            const date = new Date(msg.timestamp * 1000);
            const time = isNaN(date) ? '--:--' : date.toLocaleTimeString([], timeOptions);
    
            if (msg.user_id === 0 || msg.sender === 'System') {
                messageElement.innerHTML = `
                    <div class="message-header system-header">
                        <span class="time">${time}</span>
                    </div>
                    <p class="message-text system-text">${msg.message_text}</p>
                `;
            } else {
                messageElement.innerHTML = `
                    <div class="message-header">
                        <span class="sender">${msg.sender}</span>
                        <span class="time">${time}</span>
                    </div>
                    ${msg.message_text ? `<p class="message-text">${msg.message_text}</p>` : ''}
                    ${msg.attachments?.length > 0 ? `
                    <div class="attachments">
                        ${msg.attachments.map(att => `
                            ${att.mime_type.startsWith('image/') ? `
                                <div class="attachment-image">
                                    <img src="${att.path}" alt="${att.filename}">
                                    <span class="file-name">${att.filename}</span>
                                </div>
                            ` : `
                                <div class="attachment-file">
                                    <div class="file-icon">üìÑ</div>
                                    <a href="${att.path}" download class="file-link">
                                        ${att.filename}
                                    </a>
                                </div>
                            `}
                        `).join('')}
                    </div>
                    ` : ''}
                `;
            }
    
            chatBox.appendChild(messageElement);
        });
    
        requestAnimationFrame(() => {
            if (wasScrolledToBottom) {
                chatBox.scrollTo({
                    top: chatBox.scrollHeight,
                    behavior: 'smooth'
                });
            }
        });
    }
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    let longPressTimer;
    let isLongPress = false;
    
    function handleTouchStart(e) {
        longPressTimer = setTimeout(() => {
            isLongPress = true;
            showContextMenu(e);
        }, 500);
    }
    
    function handleTouchEnd(e) {
        clearTimeout(longPressTimer);
        if (isLongPress) {
            e.preventDefault();
            isLongPress = false;
        }
    }
    
    function showContextMenu(e) {
        e.preventDefault();
        const messageElement = e.target.closest('.message');
        if (!messageElement) return;
    
        const messageId = messageElement.dataset.id;
        const messageType = currentGroup ? 'group' : 
                           currentPrivateChat ? 'private' : 'general';
        
        messageElement.dataset.type = messageType;
    
        const rect = messageElement.getBoundingClientRect();
        const hasAttachments = messageElement.querySelector('.attachments') !== null;
    
        const existingMenu = document.querySelector('.context-menu');
        if (existingMenu) existingMenu.remove();
    
        const contextMenu = document.createElement('div');
        contextMenu.className = 'context-menu';
        contextMenu.style.left = `${rect.left}px`;
        contextMenu.style.top = `${rect.bottom}px`;
        
        // –ë–∞–∑–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
        let menuHTML = `
            <div class="context-menu-item" data-action="delete">
                <span class="menu-icon">üóëÔ∏è</span>
                –£–¥–∞–ª–∏—Ç—å
            </div>
        `;
    
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (!hasAttachments) {
            menuHTML += `
                <div class="context-menu-item" data-action="edit">
                    <span class="menu-icon">‚úèÔ∏è</span>
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </div>
            `;
        }
    
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
        if (hasAttachments) {
            menuHTML += `
                <div class="context-menu-item" data-action="view-attachments">
                    <span class="menu-icon">üëÅÔ∏è</span>
                    –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è
                </div>
                <div class="context-menu-item" data-action="download-attachments">
                    <span class="menu-icon">üì•</span>
                    –°–∫–∞—á–∞—Ç—å –≤—Å–µ
                </div>
            `;
        }
    
        contextMenu.innerHTML = menuHTML;
    
        document.body.appendChild(contextMenu);
        contextMenu.style.display = 'block';
    
        contextMenu.querySelectorAll('.context-menu-item').forEach(item => {
            item.addEventListener('click', (e) => {
                handleContextMenuAction(e, messageId, messageType, hasAttachments);
                contextMenu.remove();
            });
        });
    
        const closeMenu = (e) => {
            if (!contextMenu.contains(e.target)) {
                contextMenu.remove();
                document.removeEventListener('click', closeMenu);
            }
        };
        document.addEventListener('click', closeMenu);
    }    
    
    async function handleContextMenuAction(e, messageId, messageType, hasAttachments) {
        const action = e.target.closest('.context-menu-item').dataset.action;
        const messageElement = document.querySelector(`[data-id="${messageId}"]`);
        
        if (!messageElement) {
            console.error('Message element not found');
            return;
        }
    
        if (action === 'delete') {
            await deleteMessageById(messageId, messageType);
        } else if (action === 'edit') {
            enableMessageEditing(messageElement, messageId, messageType);
        } else if (action === 'view-attachments') {
            viewAttachments(messageElement);
        } else if (action === 'download-attachments') {
            downloadAllAttachments(messageElement);
        }
    }
    
    async function deleteMessageById(messageId, messageType) {
        try {
            const result = await showConfirmModal();
            if (!result) return;
    
            const res = await fetch(`/delete_message/${messageId}?type=${messageType}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            
            if (res.ok) {
                const messageElement = document.querySelector(`[data-id="${messageId}"]`);
                if (messageElement) messageElement.remove();
            } else {
                const error = await res.json();
                throw new Error(error.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
            showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' + error.message, 'error');
        }
    }

    function viewAttachments(messageElement) {
        const attachments = messageElement.querySelector('.attachments');
        if (!attachments) return;
    
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        const modal = document.createElement('div');
        modal.className = 'attachments-modal';
        
        let modalContent = '<div class="attachments-modal-content">';
        modalContent += '<span class="close-modal-btn">&times;</span>';
        modalContent += '<h3>–í–ª–æ–∂–µ–Ω–∏—è</h3>';
        modalContent += '<div class="attachments-container">';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        attachments.querySelectorAll('.attachment-image, .attachment-file').forEach(att => {
            if (att.classList.contains('attachment-image')) {
                const imgSrc = att.querySelector('img').src;
                modalContent += `
                    <div class="modal-attachment">
                        <img src="${imgSrc}" alt="Attachment">
                        <a href="${imgSrc}" download class="download-btn">–°–∫–∞—á–∞—Ç—å</a>
                    </div>
                `;
            } else {
                const fileLink = att.querySelector('a').href;
                const fileName = att.querySelector('a').textContent;
                modalContent += `
                    <div class="modal-attachment">
                        <div class="file-icon">üìÑ</div>
                        <span class="file-name">${fileName}</span>
                        <a href="${fileLink}" download class="download-btn">–°–∫–∞—á–∞—Ç—å</a>
                    </div>
                `;
            }
        });
        
        modalContent += '</div></div>';
        modal.innerHTML = modalContent;
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.querySelector('.close-modal-btn').addEventListener('click', () => {
            modal.remove();
        });
        
        document.body.appendChild(modal);
    }
    
    function downloadAllAttachments(messageElement) {
        const attachments = messageElement.querySelectorAll('.attachment-image img, .attachment-file a');
        if (!attachments.length) return;
    
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—É—é —Å—Å—ã–ª–∫—É –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–π
        attachments.forEach(att => {
            const link = document.createElement('a');
            link.href = att.tagName === 'IMG' ? att.src : att.href;
            link.download = att.tagName === 'IMG' ? 
                att.parentElement.querySelector('.file-name').textContent : 
                att.textContent;
            link.style.display = 'none';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        });
        
        showToast('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å', 'success');
    }

    let lastToast = {
        message: null,
        type: null,
        timestamp: 0
    };

    function showToast(message, type = 'info', onClick = null) {
        const now = Date.now();
        const toastCooldown = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —Ç–∞–∫–æ–µ –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
        if (lastToast.message === message && 
            lastToast.type === type && 
            (now - lastToast.timestamp) < toastCooldown) {
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º toast
        lastToast = {
            message,
            type,
            timestamp: now
        };
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ toast –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
        document.querySelectorAll('.toast').forEach(toast => toast.remove());
        
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        const icons = {
            'error': '‚ùå',
            'success': '‚úÖ',
            'info': '‚ÑπÔ∏è'
        };
        
        toast.innerHTML = `
            <span class="toast-icon">${icons[type] || ''}</span>
            <span class="toast-message">${message}</span>
        `;
        
        if (onClick) {
            toast.style.cursor = 'pointer';
            toast.addEventListener('click', onClick);
        }
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.classList.add('fade-out');
            setTimeout(() => {
                toast.remove();
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastToast, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (lastToast.message === message && lastToast.type === type) {
                    lastToast = {
                        message: null,
                        type: null,
                        timestamp: 0
                    };
                }
            }, 500);
        }, 3000);
    }

    function showConfirmModal() {
        return new Promise((resolve) => {
            const modal = document.getElementById('confirm-modal');
            const closeBtn = modal.querySelector('.confirm-close');
            const cancelBtn = document.getElementById('confirm-cancel');
            const deleteBtn = document.getElementById('confirm-delete');
    
            modal.classList.add('show');
    
            const cleanup = () => {
                modal.classList.remove('show');
                deleteBtn.removeEventListener('click', deleteHandler);
                cancelBtn.removeEventListener('click', cancelHandler);
                closeBtn.removeEventListener('click', cancelHandler);
                modal.removeEventListener('click', backdropHandler);
            };
    
            const deleteHandler = () => {
                cleanup();
                resolve(true);
            };
    
            const cancelHandler = () => {
                cleanup();
                resolve(false);
            };
    
            const backdropHandler = (e) => {
                if (e.target === modal) cancelHandler();
            };
    
            deleteBtn.addEventListener('click', deleteHandler);
            cancelBtn.addEventListener('click', cancelHandler);
            closeBtn.addEventListener('click', cancelHandler);
            modal.addEventListener('click', backdropHandler);
        });
    }
    
    async function enableMessageEditing(messageElement, messageId, messageType) {
        const textElement = messageElement.querySelector('.message-text');
        if (!textElement) return;
        
        const originalText = textElement.textContent;
        const originalTimestamp = messageElement.dataset.timestamp;
        
        const editContainer = document.createElement('div');
        editContainer.className = 'editable-message';
        editContainer.innerHTML = `
            <textarea class="edit-message-input">${originalText}</textarea>
            <div class="edit-buttons">
                <button class="save-edit-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button class="cancel-edit-btn">–û—Ç–º–µ–Ω–∞</button>
            </div>
        `;
        
        textElement.replaceWith(editContainer);
        
        const textarea = editContainer.querySelector('textarea');
        const saveBtn = editContainer.querySelector('.save-edit-btn');
        const cancelBtn = editContainer.querySelector('.cancel-edit-btn');
        
        textarea.focus();
        textarea.setSelectionRange(textarea.value.length, textarea.value.length);
        
        saveBtn.addEventListener('click', async () => {
            const newText = textarea.value.trim();
            if (newText && newText !== originalText) {
                try {
                    const res = await fetch(`/edit_message/${messageId}?type=${messageType}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('token')}`
                        },
                        body: JSON.stringify({ 
                            message: newText,
                            timestamp: Math.floor(Date.now()/1000) // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π timestamp
                        })
                    });
                    
                    if (res.ok) {
                        textElement.textContent = newText;
                        messageElement.dataset.timestamp = Math.floor(Date.now()/1000); // –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                        editContainer.replaceWith(textElement);
                    } else {
                        const error = await res.json();
                        throw new Error(error.error || '–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                    }
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
                    alert(`–û—à–∏–±–∫–∞: ${error.message}`);
                }
            } else {
                editContainer.replaceWith(textElement);
            }
        });
        
        cancelBtn.addEventListener('click', () => {
            editContainer.replaceWith(textElement);
        });
    }

    async function checkInterfaceUpdates() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø
            const lastCheck = parseInt(sessionStorage.getItem('groupsLastCheck') || '0');
        
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
            const groupsRes = await fetch(`/check_groups_updates?last_check=${lastCheck}&force=true`);

            if (groupsRes.ok) {
                const data = await groupsRes.json();
                if (data.updated) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    sessionStorage.setItem('groupsLastCheck', data.new_timestamp || Date.now());
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
                    await loadGroups();
                    
                    if (currentGroup) {
                        await loadParticipants();
                        await loadMessages();  
                    }
                }
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
            const chatsRes = await fetch('/check_private_chats_updates');
            if (chatsRes.ok) {
                const chatsData = await chatsRes.json();
                if (chatsData.updated) {
                    await loadPrivateChats();
                }
            }
        } catch (e) {
            console.error('Interface update error:', e);
        }
    }

    async function checkDeletedMessages() {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ DOM
        const messageElements = Array.from(document.querySelectorAll('.message[data-id]'));
        const messageIds = messageElements.map(el => el.dataset.id);
        
        if (messageIds.length === 0) return;
        
        try {
            let url;
            if (currentGroup) {
                url = `/check_messages?type=group&chat_id=${currentGroup}&ids=${messageIds.join(',')}`;
            } else if (currentPrivateChat) {
                url = `/check_messages?type=private&chat_id=${currentPrivateChat}&ids=${messageIds.join(',')}`;
            } else {
                url = `/check_messages?type=general&ids=${messageIds.join(',')}`;
            }
            
            const res = await fetch(url);
            if (res.ok) {
                const data = await res.json();
                data.existingIds = data.existingIds || [];
                messageElements.forEach(el => {
                    if (!data.existingIds.includes(el.dataset.id)) {
                        el.remove();
                    }
                });
            }
        } catch (e) {
            console.error('Error checking deleted messages:', e);
        }
    }

    async function checkEditedMessages() {
        const messageElements = Array.from(document.querySelectorAll('.message[data-id]'));
        if (messageElements.length === 0) return;
    
        try {
            let url;
            if (currentGroup) {
                url = `/check_edited_messages?type=group&chat_id=${currentGroup}`;
            } else if (currentPrivateChat) {
                url = `/check_edited_messages?type=private&chat_id=${currentPrivateChat}`;
            } else {
                url = `/check_edited_messages?type=general`;
            }
    
            // –î–æ–±–∞–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const lastMessage = messageElements[messageElements.length - 1];
            url += `&last_timestamp=${lastMessage.dataset.timestamp}`;
    
            const res = await fetch(url);
            if (res.ok) {
                const data = await res.json();
                data.editedMessages = data.editedMessages || [];
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                data.editedMessages.forEach(msg => {
                    const messageElement = document.querySelector(`[data-id="${msg.id}"]`);
                    if (messageElement) {
                        const textElement = messageElement.querySelector('.message-text');
                        if (textElement && textElement.textContent !== msg.text) {
                            textElement.textContent = msg.text;
                            messageElement.classList.add('highlight');
                            setTimeout(() => {
                                messageElement.classList.remove('highlight');
                            }, 2000);
                        }
                    }
                });
            }
        } catch (e) {
            console.error('Error checking edited messages:', e);
        }
    }

    async function createGroup() {
        const groupName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:");
        if (!groupName) return;
    
        try {
            const res = await fetch('/create_group', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ name: groupName })
            });
            
            if (res.status === 400) {
                const error = await res.json();
                alert(error.error);
                return;
            }
            
            if (res.ok) {
                await loadGroups();
                showToast("–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", 'success');
                debouncedUpdate(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            }

        } catch (error) {
            console.error("Error creating group:", error);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã");
        }
    }

    async function loadGroups() {
        try {
            const res = await fetch('/get_groups', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Cache-Control': 'no-cache'
                }
            });
            
            if (!res.ok) throw new Error(`HTTP ${res.status}`);
            
            const groups = await res.json();
            const activeGroupId = currentGroup;
            
            UI.groupsList.innerHTML = `
                <div class="group-item ${!currentGroup ? 'active' : ''}" 
                    onclick="selectGroup(null, '–û–±—â–∏–π —á–∞—Ç', this)">
                    –û–±—â–∏–π —á–∞—Ç
                </div>
                ${groups.map(group => {
                    return `
                    <div class="group-item ${group.id === activeGroupId ? 'active' : ''}" 
                        data-group-id="${group.id}" 
                        onclick="selectGroup(${group.id}, '${group.name}', this)">
                        <span>${group.name}</span>
                        <div class="group-menu">
                            <button class="group-actions-btn" onclick="event.stopPropagation(); toggleGroupMenu(event, ${group.id}, '${group.role}')">‚ãÆ</button>
                            <div class="group-actions-menu" id="group-menu-${group.id}">
                                ${group.role === 'owner' || group.role === 'admin' ? `
                                    <button class="group-action" onclick="addMemberPrompt(${group.id})">‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞</button>
                                    <button class="group-action" onclick="renameGroupPrompt(${group.id}, '${group.name}')">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ</button>
                                ` : ''}
                                <button class="group-action" onclick="leaveGroupPrompt(${group.id})">üö™ –ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É</button>
                            </div>
                        </div>
                    </div>
                    `;
                }).join('')}
            `;
        } catch (error) {
            console.error("Error loading groups:", error);
            UI.groupsList.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø</div>';
        }
    }
    
    window.renameGroupPrompt = function(groupId, currentName) {
        const newName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:", currentName);
        if(newName && newName.trim() !== currentName) {
            renameGroup(groupId, newName.trim());
        }
    };

    // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
    window.toggleGroupMenu = function(event, groupId, userRole) {
        event.stopPropagation();
        const menu = document.getElementById(`group-menu-${groupId}`);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–µ–Ω—é
        document.querySelectorAll('.group-actions-menu').forEach(m => {
            if (m !== menu) m.classList.remove('show');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
        menu.classList.toggle('show');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–µ–Ω—é
        const closeHandler = (e) => {
            if (!menu.contains(e.target)) {
                menu.classList.remove('show');
                document.removeEventListener('click', closeHandler);
            }
        };
        
        document.addEventListener('click', closeHandler);
    };
    
    window.addMemberPrompt = async function(groupId) {
        const username = prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:");
        if (!username) return;
    
        try {
            const res = await fetch('/add_to_group', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    group_id: groupId,
                    username: username,
                    role: 'member'
                })
            });
            
            if (!res.ok) {
                const error = await res.json();
                throw new Error(error.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
    
            showToast("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", 'success');
            
            await loadGroups();
            
            if (currentGroup === groupId) {
                await loadParticipants();
            }
            
            const groupElement = document.querySelector(`.group-item[data-group-id="${groupId}"]`);
            if (groupElement) {
                groupElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                groupElement.classList.add('highlight');
                setTimeout(() => groupElement.classList.remove('highlight'), 2000);
            }
        } catch (error) {
            console.error("Error adding member:", error);
            showToast(error.message, 'error');
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (error.message.includes('—Å–∞–º–æ–≥–æ —Å–µ–±—è')) {
                showToast('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –≤ –≥—Ä—É–ø–ø—É', 'error');
            }
        }
    };
    
    window.leaveGroupPrompt = async function(groupId) {
        if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É?")) {
            try {
                const res = await fetch('/leave_group', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({ group_id: groupId })
                });
                
                if (!res.ok) {
                    const error = await res.json().catch(() => ({}));
                    throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã');
                }
    
                // –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–±—â–∏–π —á–∞—Ç
                if (currentGroup === groupId) {
                    currentGroup = null;
                    sessionStorage.removeItem('currentChat');
                    UI.currentGroupName.textContent = '–û–±—â–∏–π —á–∞—Ç';
                    UI.chatBox.innerHTML = '';
                    lastTimestamp = 0;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
                await loadGroups();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–±–æ –æ–±—â–∏–π —á–∞—Ç, –ª–∏–±–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç)
                if (currentGroup === null) {
                    await loadMessages();
                }
    
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
                alert(error.message || '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
                
                // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–±—â–∏–π —á–∞—Ç
                currentGroup = null;
                sessionStorage.removeItem('currentChat');
                UI.currentGroupName.textContent = '–û–±—â–∏–π —á–∞—Ç';
                loadGroups();
                loadMessages();
            }
        }
    }

        
    window.selectGroup = async function(groupId, groupName, element) {
        if (groupId) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
            const res = await fetch(`/check_group_access?group_id=${groupId}`);
            if (!res.ok) {
                alert('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ');
                return;
            }
        }
        
        currentGroup = groupId;
        currentPrivateChat = null;
        sessionStorage.setItem('currentChat', JSON.stringify({
            type: groupId ? 'group' : 'general',
            id: groupId,
            name: groupName
        }));
        
        UI.currentGroupName.textContent = groupName || '–û–±—â–∏–π —á–∞—Ç';
        UI.chatBox.innerHTML = '';
        lastTimestamp = 0;
        loadGroups();
        loadMessages();
        loadPrivateChats();
    };



    function setupEventListeners() {
        document.getElementById('search-btn').addEventListener('click', openSearchModal);
        document.getElementById('execute-search').addEventListener('click', executeSearch);
        document.querySelector('.close-modal').addEventListener('click', closeSearchModal);

        UI.createGroupBtn.addEventListener("click", createGroup);

        UI.chatBox.addEventListener('contextmenu', showContextMenu);
        UI.chatBox.addEventListener('touchstart', handleTouchStart);
        UI.chatBox.addEventListener('touchend', handleTouchEnd);
        
        document.addEventListener('click', function(e) {
            document.querySelectorAll('.group-actions-menu').forEach(menu    => {
                if (!menu.contains(e.target)) {
                    menu.classList.remove('show');
                }
            });
        });

        UI.messageForm.addEventListener("submit", function(e) {
            e.preventDefault();
            sendMessage(e);
        });

        UI.messageInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage(e);
            }
        });
    }
    
    async function sendMessage(e) {
        e.preventDefault();
        const message = UI.messageInput.value.trim();
        const files = UI.fileInput.files;
        
        if (!message && files.length === 0) {
            clearFiles(); 
            return;
        }

        if (message.toLowerCase() === 'immamake') {
            playSoundEffect();
            UI.messageInput.value = '';
            return;
        }
    
        const tempId = Date.now();
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (message || files.length > 0) {
                const tempMessage = {
                    id: tempId,
                    sender: username,
                    message_text: message,
                    timestamp: Math.floor(Date.now()/1000),
                    temp: true,
                    type: currentPrivateChat ? 'private' : (currentGroup ? 'group' : 'general'),
                    attachments: []
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const uniqueFiles = new Set();
                Array.from(files).forEach(file => {
                    const key = `${file.name}-${file.size}`;
                    if (!uniqueFiles.has(key)) {
                        tempMessage.attachments.push({
                            filename: file.name,
                            mime_type: file.type,
                            path: URL.createObjectURL(file)
                        });
                        uniqueFiles.add(key);
                    }
                });
                
                displayMessages([tempMessage]);
            }    
    
            const formData = new FormData();
            if (message) formData.append('message', message);
            
            if (files.length > 0) {
                const uniqueFiles = new Set();
                Array.from(files).forEach(file => {
                    const key = `${file.name}-${file.size}`;
                    if (!uniqueFiles.has(key)) {
                        formData.append('files', file, file.name);
                        uniqueFiles.add(key);
                    }
                });
            }
    
            if (currentGroup) {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
                const accessRes = await fetch(`/check_group_access?group_id=${currentGroup}`);
                if (!accessRes.ok) {
                    alert('–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ');
                    currentGroup = null;
                    sessionStorage.removeItem('currentChat');
                    UI.currentGroupName.textContent = '–û–±—â–∏–π —á–∞—Ç';
                    return loadMessages();
                }
                formData.append('group_id', currentGroup.toString());
            } else if (currentPrivateChat) {
                formData.append('receiver', currentPrivateChat);
            }
    
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            const res = await fetch('/send_message', {
                method: 'POST',
                body: formData
            });
            
            if (!res.ok) throw new Error(await res.text());
    
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const tempElement = UI.chatBox.querySelector(`[data-id="${tempId}"]`);
            if (tempElement) tempElement.remove();
    
            // –û–ë–ù–û–í–õ–Ø–ï–ú –°–ü–ò–°–û–ö –ß–ê–¢–û–í –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ô –û–¢–ü–†–ê–í–ö–ò
            await loadPrivateChats();
            
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —á–∞—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
            if (currentPrivateChat) {
                const chats = await fetchPrivateChats();
                const chatExists = chats.chats.some(c => c.username === currentPrivateChat);
                if (!chatExists) {
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
                    const newChat = {
                        username: currentPrivateChat,
                        last_activity: Math.floor(Date.now()/1000)
                    };
                    renderPrivateChats([newChat, ...chats.chats]);
                }
            }
    
        } catch (error) {
            const tempElement = UI.chatBox.querySelector(`[data-id="${tempId}"]`);
            if (tempElement) tempElement.remove();
            
            console.error('–û—à–∏–±–∫–∞:', error);
            alert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
        }
        finally {
            UI.messageInput.value = '';
            UI.fileInput.value = '';
            UI.fileIndicator.style.display = 'none';
            document.querySelector('.attachment-container')?.remove();
        }
    }

    UI.messageInput.addEventListener('input', function () {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
    });

    UI.messageInput.addEventListener('focus', () => {
        if (window.innerWidth < 768) {
            setTimeout(() => {
                UI.chatBox.scrollTo({
                    top: UI.chatBox.scrollHeight,
                    behavior: 'smooth'
                });
            }, 300);
        }
    });
    
    UI.messageForm.addEventListener('submit', () => {
        if (window.innerWidth < 768) {
            UI.messageInput.blur();
        }
    });
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—Å–æ—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('load', function () {
        UI.messageInput.style.height = 'auto';
        UI.messageInput.style.height = (UI.messageInput.scrollHeight) + 'px';
    });

    // –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    UI.startChatBtn.addEventListener('click', startPrivateChat);
    UI.searchUserInput.addEventListener('input', searchUsers);


    async function fetchPrivateChats() {
        try {
            const res = await fetch('/get_private_chats');
            return await res.json();
        } catch (error) {
            console.error("Error fetching private chats:", error);
            return { chats: [] };
        }
    }

    async function searchUsers() {
        const searchTerm = UI.searchUserInput.value;
        if (searchTerm.length < 2) return;
        
        try {
            const res = await fetch(`/search_users?q=${encodeURIComponent(searchTerm)}`);
            const data = await res.json();
            renderUserSearchResults(data.users);
        } catch (error) {
            console.error("Search error:", error);
        }
    }

    function renderUserSearchResults(users) {
        UI.privateChatsList.innerHTML = users.map(user => `
            <div class="user-item" onclick="selectPrivateChat('${user}')">
                ${user}
            </div>
        `).join('');
    }

    async function selectPrivateChat(username) {
        currentPrivateChat = username;
        currentGroup = null;
        sessionStorage.setItem('currentChat', JSON.stringify({
            type: 'private',
            name: username
        }));
        UI.currentGroupName.textContent = `–õ–∏—á–Ω—ã–π —á–∞—Ç —Å ${username}`;
        UI.chatBox.innerHTML = '';
        lastTimestamp = 0;
        await loadPrivateMessages();
        await loadPrivateChats();
        const response = await fetch('/get_private_chats');
        const data = await response.json();
        renderPrivateChats(data);
            
        await loadPrivateMessages();
        requestAnimationFrame(() => {    
            UI.chatBox.scrollTo({
                top: UI.chatBox.scrollHeight,
                behavior: 'auto'
            });
        });

        // –î–æ–±–∞–≤—å—Ç–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        document.querySelectorAll('.chat-item').forEach(item => {
            item.classList.remove('active');
            if (item.querySelector('span').textContent === username) {
                item.classList.add('active');
            }
        });
    }

    async function loadPrivateMessages() {
        if (!currentPrivateChat) return;
        
        try {
            const res = await fetch(`/get_private_messages?user=${currentPrivateChat}&timestamp=${lastTimestamp}`);
            const data = await res.json();
            
            if(data.messages?.length > 0) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                const prevScrollHeight = UI.chatBox.scrollHeight;
                
                displayMessages(data.messages);
                
                // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if(data.messages.some(msg => msg.timestamp > lastTimestamp)) {
                    UI.chatBox.scrollTo({
                        top: UI.chatBox.scrollHeight,
                        behavior: 'smooth'
                    });
                }
                
                lastTimestamp = data.timestamp;
            }
        } catch (error) {
            console.error("Error loading private messages:", error);
        }
    }

    function playSoundEffect() {
        const audio = document.getElementById('sound-effect');
        audio.currentTime = 0; // –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ
        audio.play().catch(e => {
            console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:", e);
            // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É
            showToast("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞", 'info', () => {
                audio.play();
            });
        });
    }

    async function startPrivateChat() {
        const username = UI.searchUserInput.value.trim();
        if (!username) return;

        try {
            const res = await fetch(`/search_users?q=${encodeURIComponent(username)}`);
            const data = await res.json();
            const userExists = data.users.some(user => user === username);
            if (userExists) {
                selectPrivateChat(username);
                UI.searchUserInput.value = '';
            } else {
                alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    }

    async function loadPrivateChats() {
        try {
            const res = await fetch('/get_private_chats', {
                headers: {
                    'Cache-Control': 'no-cache'
                }
            });
            
            if (!res.ok) {
                throw new Error(`HTTP ${res.status}`);
            }
            
            const data = await res.json();
            renderPrivateChats(data.chats || []); 
            
            if (currentPrivateChat) {
                const chatExists = data.chats.some(c => c.username === currentPrivateChat);
                if (!chatExists) {
                    selectGroup(null, '–û–±—â–∏–π —á–∞—Ç');
                }
            }
            
        } catch (error) {
            console.error("Error loading private chats:", error);
            showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤', 'error');
        }
    }

    
    function renderPrivateChats(response) {
        try {
            let chats = [];
            if (response && typeof response === 'object') {
                if (Array.isArray(response.chats)) {
                    chats = response.chats;
                } else if (Array.isArray(response)) {
                    chats = response;
                }
            }
            
            // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
            if (currentPrivateChat && !chats.some(c => c.username === currentPrivateChat)) {
                chats.unshift({
                    username: currentPrivateChat,
                    last_activity: Math.floor(Date.now()/1000)
                });
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            chats.sort((a, b) => b.last_activity - a.last_activity);
            
            UI.privateChatsList.innerHTML = chats.map(chat => `
                <div class="chat-item ${currentPrivateChat === chat.username ? 'active' : ''}" 
                    onclick="selectPrivateChat('${chat.username}')">
                    <span>${chat.username}</span>
                    <small>${new Date(chat.last_activity * 1000).toLocaleDateString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit',
                        day: 'numeric',
                        month: 'short'
                    })}</small>
                </div>
            `).join('');
            
            if (chats.length === 0) {
                UI.privateChatsList.innerHTML = '<div class="no-chats">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</div>';
            }
        } catch (e) {
            console.error('Render chats error:', e);
            UI.privateChatsList.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤</div>';
        }
    }

    window.selectPrivateChat = async function(username) {
        currentPrivateChat = username;
        currentGroup = null;
        sessionStorage.setItem('currentChat', JSON.stringify({
            type: 'private',
            name: username
        }));
        UI.currentGroupName.textContent = `–õ–∏—á–Ω—ã–π —á–∞—Ç —Å ${username}`;
        UI.chatBox.innerHTML = '';
        lastTimestamp = 0;
        await loadPrivateMessages();
        await loadPrivateChats();
        
        await loadPrivateMessages();
        requestAnimationFrame(() => {    
            UI.chatBox.scrollTo({
                top: UI.chatBox.scrollHeight,
                behavior: 'auto'
            });
        });

        document.querySelectorAll('.chat-item').forEach(item => {
            item.classList.remove('active');
            if (item.querySelector('span').textContent === username) {
                item.classList.add('active');
            }
        });
    };

    function updateFileIndicator() {
        const files = UI.fileInput.files;
        if (files.length > 0) {
          UI.fileIndicator.style.display = 'flex';
          UI.fileCount.textContent = `${files.length} —Ñ–∞–π–ª(–æ–≤)`;
          showPreviews(files);
        } else {
          UI.fileIndicator.style.display = 'none';
        }
      }
      
      function showPreviews(files) {
        const container = document.createElement('div');
        container.className = 'attachment-container';
        
        Array.from(files).forEach(file => {
          if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = (e) => {
              const img = document.createElement('img');
              img.className = 'attachment-preview';
              img.src = e.target.result;
              container.appendChild(img);
            }
            reader.readAsDataURL(file);
          } else {
            const div = document.createElement('div');
            div.className = 'attachment-preview';
            div.textContent = file.name;
            container.appendChild(div);
          }
        });
      
        UI.chatBox.appendChild(container);
      }
      
      function clearFiles() {
        UI.fileInput.value = '';
        UI.fileIndicator.style.display = 'none';
        document.querySelector('.attachment-container')?.remove();
      }


      function openSearchModal() {
        const modal = document.getElementById('search-modal');
        modal.style.display = 'block';

        if (currentPrivateChat) {
            // –î–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º username —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            currentSearch.type = 'private';
            currentSearch.chatId = currentPrivateChat;  // –°–æ—Ö—Ä–∞–Ω—è–µ–º username, –∞ –Ω–µ ID
            document.querySelector('.search-context').textContent = 
                `–ü–æ–∏—Å–∫ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å ${currentPrivateChat}`;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫
        document.getElementById('search-input').value = '';
        document.getElementById('search-results').innerHTML = '';
        document.getElementById('search-pagination').innerHTML = '';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
        fetch('/get_user_id')
            .then(response => {
                if (!response.ok) throw new Error('Failed to get user info');
                return response.json();
            })
            .then(data => {
                if (!data.user_id) {
                    throw new Error('User not authenticated');
                }
                
                if (currentGroup) {
                    currentSearch.type = 'group';
                    currentSearch.chatId = currentGroup;
                    document.querySelector('.search-context').textContent = 
                        `–ü–æ–∏—Å–∫ –≤ –≥—Ä—É–ø–ø–µ "${document.getElementById('current-group-name').textContent}"`;
                } 
                else if (currentPrivateChat) {
                    currentSearch.type = 'private';
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    currentSearch.chatId = currentPrivateChat;
                    document.querySelector('.search-context').textContent = 
                        `–ü–æ–∏—Å–∫ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å ${currentPrivateChat}`;
                } 
                else {
                    currentSearch.type = 'general';
                    currentSearch.chatId = null;
                    document.querySelector('.search-context').textContent = '–ü–æ–∏—Å–∫ –≤ –æ–±—â–µ–º —á–∞—Ç–µ';
                }
            })
            .catch(error => {
                console.error('Error getting user info:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞');
                closeSearchModal();
            });
    }
    
    function closeSearchModal() {
        document.getElementById('search-modal').style.display = 'none';
    }
    
    function executeSearch() {
        const searchInput = document.getElementById('search-input');
        const sortSelect = document.getElementById('search-sort');
        
        currentSearch.query = searchInput.value.trim();
        currentSearch.sort = sortSelect.value;
        currentSearch.page = 1;
        
        if (!currentSearch.query) {
            alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞');
            return;
        }
        
        performSearch();
    }
    
    function performSearch() {
        const resultsContainer = document.getElementById('search-results');
        resultsContainer.innerHTML = '<div class="spinner"></div>';
        
        // –°–æ–∑–¥–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
        const url = new URL('/search_messages', window.location.origin);
        url.searchParams.set('q', currentSearch.query);
        url.searchParams.set('type', currentSearch.type);
        
        // –î–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º username —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        if (currentSearch.type === 'private' && currentPrivateChat) {
            url.searchParams.set('chat_id', currentPrivateChat);
        } 
        // –î–ª—è –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –≥—Ä—É–ø–ø—ã
        else if (currentSearch.type === 'group' && currentGroup) {
            url.searchParams.set('chat_id', currentGroup);
        }
        
        // –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        url.searchParams.set('page', currentSearch.page);
        url.searchParams.set('per_page', currentSearch.perPage);
        url.searchParams.set('sort', currentSearch.sort);
    
        fetch(url)
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.error || 'Search failed');
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.messages.length === 0) {
                    resultsContainer.innerHTML = `
                        <p>–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                        <p class="search-context">
                            –ü–æ–∏—Å–∫ –≤ ${getSearchContextString()}
                        </p>
                    `;
                    document.getElementById('search-pagination').innerHTML = '';
                    return;
                }
                
                resultsContainer.innerHTML = `
                    <p class="search-context">
                        –ù–∞–π–¥–µ–Ω–æ ${data.total} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ${getSearchContextString()}
                    </p>
                    ${data.messages.map(msg => `
                        <div class="search-result-item" data-id="${msg.id}">
                            <div class="search-result-header">
                                <span class="sender">${msg.sender}</span>
                                <span class="time">${new Date(msg.timestamp * 1000).toLocaleString()}</span>
                            </div>
                            <div class="search-result-text">${msg.text}</div>
                        </div>
                    `).join('')}
                `;
                
                renderPagination(data.total, data.per_page, data.page);
            })
            .catch(error => {
                console.error('Search error:', error);
                resultsContainer.innerHTML = `
                    <p class="error">–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}</p>
                    <p class="search-context">${getSearchContextString()}</p>
                    <button onclick="performSearch()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                `;
            });
    
        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
        function getSearchContextString() {
            if (currentSearch.type === 'private' && currentPrivateChat) {
                return `–ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å ${currentPrivateChat}`;
            } else if (currentSearch.type === 'group' && currentGroup) {
                return `–≥—Ä—É–ø–ø–µ "${document.getElementById('current-group-name').textContent}"`;
            }
            return '–æ–±—â–µ–º —á–∞—Ç–µ';
        }
    }
    
    function renderPagination(total, perPage, currentPage) {
        const paginationContainer = document.getElementById('search-pagination');
        const totalPages = Math.ceil(total / perPage);
        
        if (totalPages <= 1) {
            paginationContainer.innerHTML = '';
            return;
        }
        
        let html = '';
        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
        
        if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if (currentPage > 1) {
            html += `<button class="page-btn" onclick="changeSearchPage(${currentPage - 1})">&lt;</button>`;
        }
        
        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (startPage > 1) {
            html += `<button class="page-btn" onclick="changeSearchPage(1)">1</button>`;
            if (startPage > 2) {
                html += `<span class="page-dots">...</span>`;
            }
        }
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for (let i = startPage; i <= endPage; i++) {
            html += `<button class="page-btn ${i === currentPage ? 'active' : ''}" onclick="changeSearchPage(${i})">${i}</button>`;
        }
        
        // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                html += `<span class="page-dots">...</span>`;
            }
            html += `<button class="page-btn" onclick="changeSearchPage(${totalPages})">${totalPages}</button>`;
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if (currentPage < totalPages) {
            html += `<button class="page-btn" onclick="changeSearchPage(${currentPage + 1})">&gt;</button>`;
        }
        
        paginationContainer.innerHTML = html;
    }
    
    function changeSearchPage(newPage) {
        currentSearch.page = newPage;
        performSearch();
        document.getElementById('search-results').scrollTop = 0;
    }
    
    function scrollToMessage(messageId) {
        const messageElement = document.querySelector(`.message[data-id="${messageId}"]`);
        if (messageElement) {
            messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            messageElement.classList.add('highlight');
            setTimeout(() => messageElement.classList.remove('highlight'), 2000);
        }
    }

    async function loadParticipants() {
        try {
            if (!currentGroup) {
                // –î–ª—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞
                const res = await fetch('/get_general_members');
                const data = await res.json();
                
                UI.membersList.innerHTML = '';
                const currentUsername = sessionStorage.getItem('username');
                
                data.members.forEach(member => {
                    const isMe = member === currentUsername;
                    
                    const memberElement = document.createElement('div');
                    memberElement.className = 'member-item';
                    
                    memberElement.innerHTML = `
                        <div class="member-avatar">${member[0].toUpperCase()}</div>
                        <span class="member-name">${member}</span>
                        <span class="member-role">üë§ –£—á–∞—Å—Ç–Ω–∏–∫</span>
                        <div class="member-status ${isMe ? 'online' : 'offline'}"></div>
                    `;
                    
                    memberElement.addEventListener('click', () => {
                        if (member !== currentUsername) {
                            selectPrivateChat(member);
                        }
                    });
                    
                    UI.membersList.appendChild(memberElement);
                });
                return;
            }
            
            // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            const res = await fetch(`/get_group_members?group_id=${currentGroup}`);
            const data = await res.json();
            
            const currentUsername = sessionStorage.getItem('username');
            const currentUser = data.members.find(m => m.username === currentUsername);
            if (!currentUser) return;
            
            UI.membersList.innerHTML = '';
            
            data.members.forEach(member => {
                const isMe = member.username === currentUsername;
                const isOnline = isMe; // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω
                
                const canManage = (currentUser.role === 'owner' || 
                                 (currentUser.role === 'admin' && member.role === 'member')) && 
                                 !isMe;
                
                const memberElement = document.createElement('div');
                memberElement.className = 'member-item';
                
                memberElement.innerHTML = `
                    <div class="member-avatar">${member.username[0].toUpperCase()}</div>
                    <span class="member-name">${member.username}</span>
                    <span class="member-role ${member.role}">${GroupRoles.getRoleName(member.role)}</span>
                    ${canManage ? `<button class="member-actions-btn" onclick="event.stopPropagation(); GroupRoles.showMemberMenu(event, ${currentGroup}, '${member.username}', '${member.role}', true, true)">‚ãÆ</button>` : ''}
                    <div class="member-status ${isOnline ? 'online' : 'offline'}"></div>
                `;
                
                memberElement.addEventListener('click', () => {
                    if (member.username !== currentUsername) {
                        selectPrivateChat(member.username);
                    }
                });
                
                UI.membersList.appendChild(memberElement);
            });
            
        } catch (error) {
            console.error("Error loading participants:", error);
            UI.membersList.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>';
        }
    }
    
    window.handleMemberClick = function(username) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        UI.membersSidebar.classList.remove('active');
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
        const currentUser = sessionStorage.getItem('username');
        if (username === currentUser) return;
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π —á–∞—Ç
        selectPrivateChat(username);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        loadPrivateChats();
    };
    window.changeSearchPage = changeSearchPage;

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏
    window.GroupRoles = {
        init: function() {
            this.templates = {
                roleMenu: document.getElementById('role-menu-template'),
                memberItem: document.getElementById('group-member-template')
            };
        },
        
        getRoleName: function(role) {
            const roles = {
                'owner': 'üëë –í–ª–∞–¥–µ–ª–µ—Ü',
                'admin': 'üõ°Ô∏è –ê–¥–º–∏–Ω',
                'member': 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫'
            };
            return roles[role] || role;
        },
        
        showRoleMenu: function(e, groupId, username) {
            e.stopPropagation();
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é —Ä–æ–ª–µ–π
            const existingRoleMenu = document.querySelector('.role-menu');
            if (existingRoleMenu) existingRoleMenu.remove();
            
            // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Ä–æ–ª–µ–π –∏–∑ —à–∞–±–ª–æ–Ω–∞
            const roleMenu = this.templates.roleMenu.content.cloneNode(true);
            const roleMenuElement = roleMenu.querySelector('.role-menu');
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const usernamePlaceholder = roleMenuElement.querySelector('.username-placeholder');
            usernamePlaceholder.textContent = username;
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é
            const buttonRect = e.target.getBoundingClientRect();
            const viewportWidth = window.innerWidth;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            let leftPosition = buttonRect.left;
            let topPosition = buttonRect.bottom + window.scrollY;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
            if (leftPosition + 240 > viewportWidth) {
                leftPosition = viewportWidth - 240 - 10;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            roleMenuElement.style.position = 'absolute';
            roleMenuElement.style.top = `${topPosition}px`;
            roleMenuElement.style.left = `${leftPosition}px`;
            roleMenuElement.style.zIndex = '1200';
            
            document.body.appendChild(roleMenuElement);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
            roleMenuElement.querySelectorAll('.role-option').forEach(option => {
                option.addEventListener('click', () => {
                    this.changeMemberRole(groupId, username, option.dataset.role);
                    roleMenuElement.remove();
                });
            });
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–µ–Ω—é
            const closeHandler = (e) => {
                if (!roleMenuElement.contains(e.target)) {
                    roleMenuElement.remove();
                    document.removeEventListener('click', closeHandler);
                }
            };
            
            setTimeout(() => {
                document.addEventListener('click', closeHandler);
            }, 10);
        },
        
        changeMemberRole: async function(groupId, username, newRole) {
            try {
                const res = await fetch('/change_member_role', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        group_id: groupId,
                        username: username,
                        role: newRole
                    })
                });
                
                if (res.ok) {
                    await loadParticipants();
                    showToast(`–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –∏–∑–º–µ–Ω–µ–Ω–∞`, 'success');
                    debouncedUpdate(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                await loadParticipants();
                showToast(`–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "${this.getRoleName(newRole)}"`, 'success');
                
            } catch (error) {
                console.error('Role change error:', error);
                showToast(error.message, 'error');
            }
        },
        
        createMemberElement: function(member, currentUser) {
            const isMe = member.username === currentUser.username;
            const canEdit = (currentUser.role === 'owner' || 
                        (currentUser.role === 'admin' && member.role === 'member')) && 
                        !isMe;
            const canRemove = (currentUser.role === 'owner' || 
                          (currentUser.role === 'admin' && member.role === 'member')) && 
                          !isMe;
            
            // –ö–ª–æ–Ω–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
            const memberElement = this.templates.memberItem.content.cloneNode(true).querySelector('.member-item');
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            memberElement.querySelector('.member-avatar').textContent = member.username[0].toUpperCase();
            memberElement.querySelector('.member-name').textContent = member.username;
            
            const roleElement = memberElement.querySelector('.member-role');
            roleElement.textContent = this.getRoleName(member.role);
            roleElement.classList.add(member.role);
            
            if (isMe) {
                roleElement.textContent += ' (–í—ã)';
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è)
            const actionsBtn = memberElement.querySelector('.member-actions-btn');
            if (canEdit || canRemove) {
                actionsBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.showMemberMenu(e, currentUser.groupId, member.username, member.role, canEdit, canRemove);
                });
            } else {
                actionsBtn.style.display = 'none';
            }
            
            // –°—Ç–∞—Ç—É—Å (–æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω)
            memberElement.querySelector('.member-status').classList.add(
                Math.random() > 0.3 ? 'online' : 'offline'
            );
            
            return memberElement;
        },
        
        showMemberMenu: function(e, groupId, username, role, canEdit, canRemove) {
            e.stopPropagation();
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –µ—Å—Ç—å
            const existingMenu = document.querySelector('.member-menu');
            if (existingMenu) existingMenu.remove();
            
            // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
            const menu = document.createElement('div');
            menu.className = 'member-menu';
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π
            const buttonRect = e.target.getBoundingClientRect();
            const viewportWidth = window.innerWidth;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –º–µ–Ω—é
            let leftPosition = buttonRect.left;
            let topPosition = buttonRect.bottom + 5;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –º–µ–Ω—é –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–æ –∑–∞ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
            const menuWidth = 220;
            if (leftPosition + menuWidth > viewportWidth) {
                leftPosition = viewportWidth - menuWidth - 10;
            }
            
            menu.style.left = `${leftPosition}px`;
            menu.style.top = `${topPosition}px`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞
            if (canEdit) {
                const editRoleItem = document.createElement('div');
                editRoleItem.className = 'menu-item';
                editRoleItem.innerHTML = '<span class="menu-icon">üõ°Ô∏è</span> –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å';
                editRoleItem.addEventListener('click', () => {
                    this.showRoleMenu(e, groupId, username);
                    menu.remove();
                });
                menu.appendChild(editRoleItem);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞
            if (canRemove) {
                const removeItem = document.createElement('div');
                removeItem.className = 'menu-item remove-item';
                removeItem.innerHTML = '<span class="menu-icon">üö™</span> –ò—Å–∫–ª—é—á–∏—Ç—å';
                removeItem.addEventListener('click', (e) => {
                    e.stopPropagation();
                    removeMemberFromGroup(groupId, username);
                    menu.remove();
                });
                menu.appendChild(removeItem);
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            if (menu.children.length === 0) {
                return;
            }
            
            document.body.appendChild(menu);
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–µ–Ω—é
            const closeHandler = (e) => {
                if (!menu.contains(e.target) && !e.target.classList.contains('member-actions-btn')) {
                    menu.remove();
                    document.removeEventListener('click', closeHandler);
                }
            };
            
            document.addEventListener('click', closeHandler);
        },
    };

    GroupRoles.init();

    async function renameGroup(groupId, currentName) {
        const newName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:", currentName);
        if (!newName || newName.trim() === currentName) return;
    
        try {
            const res = await fetch('/rename_group', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({
                    group_id: groupId,
                    new_name: newName.trim()
                })
            });
    
            if (!res.ok) {
                const error = await res.json();
                throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è');
            }
    
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (currentGroup === groupId) {
                UI.currentGroupName.textContent = newName;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
            await loadGroups();
            showToast('–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ', 'success');
    
        } catch (error) {
            console.error("Rename group error:", error);
            showToast(error.message, 'error');
        }
    }

    window.removeMemberFromGroup = async function(groupId, username) {
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å ${username} –∏–∑ –≥—Ä—É–ø–ø—ã?`)) {
            return;
        }
    
        try {
            const res = await fetch('/remove_from_group', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({
                    group_id: groupId,
                    username: username
                })
            });
    
            const data = await res.json();
            
            if (!res.ok) {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏');
            }
    
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await loadParticipants();
            showToast(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã`, 'success');
    
            // –ï—Å–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–±—â–∏–π —á–∞—Ç
            if (data.is_current_user) {
                currentGroup = null;
                sessionStorage.removeItem('currentChat');
                UI.currentGroupName.textContent = '–û–±—â–∏–π —á–∞—Ç';
                UI.chatBox.innerHTML = '';
                lastTimestamp = 0;
                loadMessages();
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
                await loadGroups();
            } else if (currentGroup === groupId) {
                // –ï—Å–ª–∏ –º—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                await loadParticipants();
            }
    
        } catch (error) {
            console.error("Remove member error:", error);
            showToast(error.message, 'error');
        }
    }

});

